drop view employee_admin;
drop view employee_user;
drop view member_employee;
drop view member_list;
drop view tree_view;

create view tree_view as
SELECT
    name as name,
    SEQ_ID as ID,
    to_number(NULL) as paID
FROM notice_lists

UNION

SELECT
    name as name,
    NOTICE_LISTS_SEQ_ID as ID,
    LIST_SEQ_ID as PaID
from nl_members join
     notice_lists on (seq_id = notice_lists_seq_id)
     where notice_lists_seq_id is not null and list_seq_id is not null
    ;

create view employee_admin as
SELECT 
    EMPLOYEE_ID,
    NAME,
    LAB,
    DIVISION,
    STATUS,
    STATUS_EFF_DATE,
    ADMIN,
    NETWORK_ACCOUNT_ID
FROM active_employees where ADMIN = 1 ;

create or replace TRIGGER employee_admin_trigger
     INSTEAD OF insert ON employee_admin
     FOR EACH ROW
BEGIN
     insert into active_employees( 
    EMPLOYEE_ID,
    NAME,
    LAB,
    DIVISION,
    STATUS,
    STATUS_EFF_DATE,
    ADMIN,
    NETWORK_ACCOUNT_ID)
     VALUES ( 
    :NEW.EMPLOYEE_ID,
    :NEW.NAME,
    :NEW.LAB,
    :NEW.DIVISION,
    'A',
    SYSDATE,
    1,
    :NEW.NETWORK_ACCOUNT_ID) ;
END;
/

create view employee_user as
SELECT 
    EMPLOYEE_ID,
    NAME,
    LAB,
    DIVISION,
    STATUS,
    STATUS_EFF_DATE,
    ADMIN,
    NETWORK_ACCOUNT_ID
FROM active_employees where ADMIN = 0 ;

create or replace TRIGGER employee_user_trigger
     INSTEAD OF insert ON employee_user
     FOR EACH ROW
BEGIN
     insert into active_employees( 
    EMPLOYEE_ID,
    NAME,
    LAB,
    DIVISION,
    STATUS,
    STATUS_EFF_DATE,
    ADMIN,
    NETWORK_ACCOUNT_ID)
     VALUES ( 
    :NEW.EMPLOYEE_ID,
    :NEW.NAME,
    :NEW.LAB,
    :NEW.DIVISION,
    'A',
    SYSDATE,
    0,
    :NEW.NETWORK_ACCOUNT_ID) ;
END;
/

create view member_employee as
SELECT 
    MEMBER_ID,
    DATE_ADDED,
    LIST_SEQ_ID,
    NOTICE_LISTS_SEQ_ID,
    ACTIVE_EMPLOYEES_EMPLOYEE_ID
FROM nl_members where NOTICE_LISTS_SEQ_ID is NULL;

create or replace TRIGGER member_employee_trigger
     INSTEAD OF insert ON member_employee
     FOR EACH ROW
BEGIN
     insert into nl_members( 
    MEMBER_ID,
    DATE_ADDED,
    LIST_SEQ_ID,
    NOTICE_LISTS_SEQ_ID,
    ACTIVE_EMPLOYEES_EMPLOYEE_ID)
     VALUES ( 
    :NEW.MEMBER_ID,
    SYSDATE,
    :NEW.LIST_SEQ_ID,
    NULL,
    :NEW.ACTIVE_EMPLOYEES_EMPLOYEE_ID) ;
END;
/

create view member_list as
SELECT 
    MEMBER_ID,
    DATE_ADDED,
    LIST_SEQ_ID,
    NOTICE_LISTS_SEQ_ID,
    ACTIVE_EMPLOYEES_EMPLOYEE_ID
FROM nl_members where ACTIVE_EMPLOYEES_EMPLOYEE_ID is NULL;

create or replace TRIGGER member_list_trigger
     INSTEAD OF insert ON member_list
     FOR EACH ROW
BEGIN
     insert into nl_members( 
    MEMBER_ID,
    DATE_ADDED,
    LIST_SEQ_ID,
    NOTICE_LISTS_SEQ_ID,
    ACTIVE_EMPLOYEES_EMPLOYEE_ID)
     VALUES ( 
    :NEW.MEMBER_ID,
    SYSDATE,
    :NEW.LIST_SEQ_ID,
    :NEW.NOTICE_LISTS_SEQ_ID,
    NULL) ;
END;
/

create or replace TRIGGER notice_list_update_trigger
     before update of status on notice_lists
     FOR EACH ROW
BEGIN
    :NEW.status_eff_date := sysdate;
END;
/